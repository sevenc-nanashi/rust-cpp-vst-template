name: "Build"

on:
  workflow_dispatch:

  push:
    branches:
      - main
    tags:
      - v*

defaults:
  run:
    shell: bash

env:
  PLUGIN_NAME: "my-plugin"

jobs:
  build-each:
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest]
        include:
          - os: windows-latest
            name: "windows"
    runs-on: ${{ matrix.os }}
    steps:
      - name: Colorize
        run: |
          echo "CLICOLOR_FORCE=1" >> $GITHUB_ENV
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: "recursive"
      - name: Setup Rust
        run: rustup toolchain install stable --profile minimal

      - name: Cache
        uses: Swatinem/rust-cache@v2

      - name: Determine Information
        id: determine-information
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            let version = github.ref_name;
            if (!version) {
              version = "255.255.255";
            }
            core.setOutput('ref_name', version);
            core.setOutput('prerelease', version === "255.255.255" || version.includes("-"));
            core.setOutput('zip_name', `$PLUGIN_NAME-${version}-${{ matrix.name }}.vst3.zip`);
            core.setOutput('au_name', `$PLUGIN_NAME-${version}-${{ matrix.name }}.au.zip`);
            require('fs').writeFileSync('version.txt', version);

      - name: Install dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install llvm

          echo "/usr/local/opt/llvm/bin" >> $GITHUB_PATH
          echo 'LDFLAGS=-L/opt/homebrew/opt/llvm/lib' >> $GITHUB_ENV
          echo 'CPPFLAGS=-I/opt/homebrew/opt/llvm/include' >> $GITHUB_ENV
          echo 'CC=clang' >> $GITHUB_ENV
          echo 'CXX=clang++' >> $GITHUB_ENV

      - name: Install dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-24.04'
        run: |
          echo "CC=gcc-14" >> $GITHUB_ENV
          echo "CXX=g++-14" >> $GITHUB_ENV

      - name: Build
        run: |
          cargo xtask build --release

      - name: Package
        run: |
          cd build/release/bin/
          7z a -tzip ${{ steps.determine-information.outputs.zip_name }} $PLUGIN_NAME.vst3
          cp ${{ steps.determine-information.outputs.zip_name }} ../../../

      - name: Package AU
        if: matrix.os == 'macos-latest'
        run: |
          cd build/release/bin/
          7z a -tzip ${{ steps.determine-information.outputs.au_name }} $PLUGIN_NAME.component
          cp ${{ steps.determine-information.outputs.au_name }} ../../../

      - name: Upload
        uses: softprops/action-gh-release@v2
        with:
          body: |
            SHA: ${{ github.sha }}
          prerelease: ${{ steps.determine-information.outputs.prerelease }}
          files: |
            ${{ steps.determine-information.outputs.zip_name }}
            ${{ steps.determine-information.outputs.au_name }}
          tag_name: ${{ steps.determine-information.outputs.ref_name }}

      - name: Build installer
        if: matrix.os == 'windows-latest'
        run: |
          cargo xtask generate-installer

      - name: Upload installer
        if: matrix.os == 'windows-latest'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.determine-information.outputs.ref_name }}
          files: ./build/$PLUGIN_NAME-*-windows-setup.exe
